name: download-release-asset
description: Download an asset from a GitHub Release

inputs:
  github-token:
    description: 'A token with permission to download assets from repository releases'
    required: true
  asset-name:
    description: 'The name of the release asset'
    required: true
  tag-name:
    description: 'The tag associated with the release that contains the asset to download. You may also use the tag name "latest".'
    required: true
  repository:
    description: 'The organization/repository to download the release asset from.  If not provided, defaults to github.repository'
    required: false

outputs:
  download-file-path: 
    description: 'Full file path of download asset'
    value: ${{ steps.download.outputs.download_file_path }}

runs:
  using: 'composite'
  steps:
    - name: Setup variables
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const GITHUB_OUTPUT = path.join(process.env.GITHUB_WORKSPACE, 'GITHUB_OUTPUT');
          const GITHUB_EVENT_PATH = process.env.GITHUB_EVENT_PATH;

          const githubToken = core.getInput('github-token');
          const assetName = core.getInput('asset-name');
          const tagName = core.getInput('tag-name');
          const repository = core.getInput('repository');
          const octokit = github.getOctokit(githubToken);

          const event = JSON.parse(fs.readFileSync(GITHUB_EVENT_PATH, 'utf8'));
          const { owner, repo } = event.repository;

          const downloadAsset = async () => {
            try {
              const { data: release } = await octokit.repos.getReleaseByTag({
                owner,
                repo,
                tag: tagName,
              });

              const { data: assets } = await octokit.repos.listReleaseAssets({
                owner,
                repo,
                release_id: release.id,
              });

              const asset = assets.find(({ name }) => name === assetName);

              if (!asset) {
                throw new Error(`No asset found with name "${assetName}"`);
              }

              const { data: download } = await octokit.repos.downloadReleaseAsset({
                owner,
                repo,
                asset_id: asset.id,
                headers: {
                  Accept: 'application/octet-stream',
                },
              });

              const downloadFilePath = path.join(process.env.GITHUB_WORKSPACE, assetName);
              fs.writeFileSync(downloadFilePath, download);
              core.setOutput('download_file_path', downloadFilePath);
              core.setOutput('download-file-path', downloadFilePath);
            } catch (error) {
              core.setFailed(error.message);
            }
          };

          downloadAsset();  

    # - name: Download Asset
    #   id: download
    #   shell: bash
    #   run: |
    #     # Script to download asset file from tag release using GitHub API v3.
    #     # See: http://stackoverflow.com/a/35688093/55075    

    #     # Define variables.
    #     name='${{ inputs.asset-name }}'
    #     GH_REPO="https://api.github.com/repos/${{ inputs.repository || github.repository }}"
    #     GH_TAGS="$GH_REPO/releases/${{ (inputs.tag-name == 'latest' && 'latest') || format('tags/{0}', inputs.tag-name) }}"
    #     AUTH="Authorization: token ${{ inputs.github-token }}"
    #     WGET_ARGS="--content-disposition --auth-no-challenge --no-cookie"
    #     CURL_ARGS="-LJO#f"

    #     # Read asset tags.
    #     response=$(curl -sH "$AUTH" $GH_TAGS)

    #     # Get ID of the asset based on given name.
    #     eval $(echo "$response" | grep -C3 "name.:.\+$name" | grep -w id | tr : = | tr -cd '[[:alnum:]]=')
    #     [ "$id" ] || { echo "Error: Failed to get asset id, response: $response" | awk 'length($0)<100' >&2; exit 1; }
    #     GH_ASSET="$GH_REPO/releases/assets/$id"

    #     # Download asset file.
    #     echo "Downloading asset..." >&2
    #     curl $CURL_ARGS -H "Authorization: token ${{ inputs.github-token }}" -H 'Accept: application/octet-stream' "$GH_ASSET"

    #     base_path=$(pwd)
    #     download_file_path="$base_path/${{ inputs.asset-name }}"
    #     echo "download_file_path=$download_file_path" >> $GITHUB_OUTPUT
    #     echo "download-file-path=$download_file_path" >> $GITHUB_OUTPUT
